# Indicate if we are installing or removing Kiali.
- debug:
    msg: INSTALLING KIALI
  when: state == "present"
- debug:
    msg: REMOVING KIALI
  when: state == "absent"

- name: Get information about the cluster
  set_fact:
    api_groups: "{{ lookup('k8s', cluster_info='api_groups') }}"

- name: Determine the cluster type
  set_fact:
    is_openshift: "{{ True if 'route.openshift.io' in api_groups else False }}"
    is_k8s: "{{ False if 'route.openshift.io' in api_groups else True }}"
  when: force_cluster is not defined

# This is for debugging purposes; allows the user to explicitly set cluster type.
- name: Force cluster type
  set_fact:
    is_openshift: "{{ True if force_cluster == 'openshift' else False }}"
    is_k8s: "{{ True if force_cluster == 'k8s' else False }}"
  when: force_cluster is defined

# Indicate what kind of cluster we are in (OpenShift or Kubernetes).
- debug:
    msg: "CLUSTER TYPE: is_openshift={{ is_openshift }}; is_k8s={{ is_k8s }}"

- name: Set default auth_strategy based on cluster type
  set_fact:
    auth_strategy: "{{ 'openshift' if is_openshift else 'login' }}"
  when: auth_strategy == ""

- name: Set default web_root based on cluster type
  set_fact:
    web_root: "{{ '/' if is_openshift else '/kiali' }}"
  when: web_root == ""
- name: Make sure web root never ends with a slash
  set_fact:
    web_root: "{{ web_root | regex_replace('\\/$', '')  }}"
  when:
  - web_root != "/"
  - web_root is match(".*/$")

# Indicate how users are to authenticate to Kiali, making sure the strategy is valid.
- debug:
    msg: "AUTH STRATEGY={{ auth_strategy }}"
- name: Confirm auth_strategy is valid
  fail:
    msg: "Invalid auth_strategy! Must be one of either 'login', 'openshift', or 'anonymous'"
  when:
  - auth_strategy != 'login'
  - auth_strategy != 'openshift'
  - auth_strategy != 'anonymous'

# WHEN ANSIBLE OPERATOR CONTAINS ANSIBLE 2.8,
# WE CAN REPLACE THIS SHELL TASK BELOW WITH AN ANSIBLE TASK THAT LOOKS LIKE THIS:
#- name: Determine image version when last release is to be installed
#  github_release:
#    user: kiali
#    repo: kiali
#    action: latest_release
#  register: image_version
#  when: image_version == "lastrelease"

- name: Determine image version when last release is to be installed
  shell: echo -n $(curl -s https://api.github.com/repos/kiali/kiali/releases/latest 2> /dev/null | grep  "tag_name" | sed -e 's/.*://' -e 's/ *"//' -e 's/",//')
  register: github_lastrelease
  when: image_version == "lastrelease"
- set_fact:
    image_version: "{{ github_lastrelease.stdout }}"
  when: image_version == "lastrelease"

- name: Determine version_label based on image_version
  set_fact:
    version_label: "{{ 'master' if image_version == 'latest' else image_version }}"
  when: version_label == ""

# Indicate which Kiali image we are going to use.
- debug:
    msg: "IMAGE_NAME={{ image_name }}; IMAGE VERSION={{ image_version }}; VERSION LABEL={{ version_label }}"

- name: Execute for OpenShift environment
  include: openshift/os-main.yml
  when: is_openshift == True

- name: Execute for Kubernetes environment
  include: kubernetes/k8s-main.yml
  when: is_k8s == True

# We only care about state=present. The dashboard CRs will automatically delete when we delete their CRD.
# These are optional - don't abort if they fail to install.
- name: Create the Monitoring Dashboards
  k8s:
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    definition: "{{ lookup('template', item) }}"
  with_fileglob:
  - "templates/dashboards/*.yaml"
  when:
  - state == "present"
  ignore_errors: yes

# For some reason, the Ansible operator cannot/will not delete the running Pod, so do it here.
- name: If uninstalling, remove any running Kiali pod
  include: remove-pod.yml
  when: state == "absent"

- name: Kiali operator has completed all processing.
  debug:
    msg: "DONE. state={{ state }}"
