name: Kiali Release

on:
  push

jobs:
  initialize:
    name: Initialize
    runs-on: ubuntu-latest
    outputs:
      target_branch: ${{ steps.target_branch.outputs.target_branch }}
      release_type: ${{ steps.release_type.outputs.release_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      # The initialize job gathers variables for later use in jobs.
      # We are using this technique rather environment variables because at the moment, they won't work with reusable jobs.
      # A positive side effect of this is that we can print all variables at start for debugging and troubleshooting.
      - id: target_branch
        run: echo "::set-output name=target_branch::${{ github.base_ref || github.ref_name }}"        
      - name: Determine release type
        id: release_type
        run: echo "::set-output name=release_type::$(./.github/workflows/util/release_type.sh)"

  build_backend:
    name: Build backend
    uses: ./.github/workflows/build-backend.yml
    needs: [initialize]
  build_frontend:
    name: Build frontend
    uses: ./.github/workflows/build-frontend.yml
    needs: [initialize]
    with:
      target_branch: ${{needs.initialize.outputs.target_branch}}
  release_kiali:
    name: Release Kiali
    runs-on: ubuntu-20.04
    needs: [initialize, build_backend, build_frontend]
    env:
      RELEASE_TYPE: ${{ needs.initialize.outputs.release_type}}        
    steps:    
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Install required software        
        run: sudo apt-get install -y node-semver
      
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17.7

      - name: Cache Go deps
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: build
          path: frontend/build       

      - name: Set version tag
        id: version_info
        run: echo "::set-output name=version_tag::$(sed -rn 's/^VERSION \?= (.*)/\1/p' Makefile)"
    
      - name: Build backend for multi-arch
        run: make -e DOCKER_CLI_EXPERIMENTAL=enabled build-linux-multi-arch

      - name: Login to Quay
        run: docker login -u "${{ secrets.QUAY_USER }}" -p "${{ secrets.QUAY_PASSWORD }}" quay.io

      - name: Push Kiali image
        env:
          CONTAINER_VERSION: ${{ steps.version_info.outputs.version_tag }}
        run: make -e DOCKER_CLI_EXPERIMENTAL=enabled container-multi-arch-push-kiali-quay